grammar org.efry.z80editor.Z80 with org.eclipse.xtext.common.Terminals

generate z80 "http://www.efry.org/z80editor/Z80"

Z80Model:
    commands+=Line*;

 REGISTER_A: 'a';
 REGISTER_B: 'b';
 REGISTER_C: 'c';
 REGISTER_D: 'd';
 REGISTER_E: 'e';
 REGISTER_H: 'h';
 REGISTER_I: 'i';
 REGISTER_L: 'l';
 REGISTER_R: 'r';

 REGISTER_AF: 'af';
 terminal REGISTER_AF_SHADOW: "af'";
 REGISTER_BC: 'bc';
 REGISTER_DE: 'de';
 REGISTER_HL: 'hl';
 REGISTER_IX: 'ix';
 REGISTER_IY: 'iy';
 REGISTER_SP: 'sp';

 REGISTER_IXH: 'ixh';
 REGISTER_IXL: 'ixl';
 REGISTER_IYH: 'iyh';
 REGISTER_IYL: 'iyl';

 DOT: '.';

terminal NEWLINE:
// New line on DOS or Unix
    '\r'? '\n';


VarName:  '_sizeof_' | 'a' | 'adc' | 'add' | 'af' | 'align' | 'and' | 'args' | 'asc' | 'asciitable' | 'asctable' | 'asm' | 'b' | 'bank' | 'banks' | 'banksize' | 'bankstotal' | 'bc' | 'bit' | 'byt' | 'c' | 'call' | 'ccf' | 'cp' | 'cpd' | 'cpdr' | 'cpi' | 'cpir' | 'cpl' | 'd' | 'daa' | 'db' | 'de' | 'dec' | 'def' | 'defaultslot' | 'define' | 'desc' | 'di' | 'djnz' | 'ds' | 'dsb' | 'dstruct' | 'dsw' | 'dw' | 'e' | 'ei' | 'else' | 'emptyfill' | 'enda' | 'endasm' | 'ende' | 'endif' | 'endm' | 'endme' | 'endr' | 'endro' | 'ends' | 'endst' | 'enum' | 'equ' | 'ex' | 'export' | 'exx' | 'filter' | 'force' | 'free' | 'fsize' | 'h' | 'halt' | 'hl' | 'i' | 'if' | 'ifdef' | 'ifdefm' | 'ifeq' | 'ifexists' | 'ifgr' | 'ifgreq' | 'ifle' | 'ifleeq' | 'ifndef' | 'ifndefm' | 'ifneq' | 'im' | 'in' | 'inc' | 'incbin' | 'include' | 'ind' | 'indr' | 'ini' | 'inir' | 'instanceof' | 'ix' | 'iy' | 'jp' | 'jr' | 'l' | 'ld' | 'ldd' | 'lddr' | 'ldi' | 'ldir' | 'm' | 'macro' | 'map' | 'memorymap' | 'nargs' | 'nc' | 'neg' | 'nop' | 'nz' | 'or' | 'org' | 'otdr' | 'otir' | 'out' | 'outd' | 'outi' | 'overwrite' | 'p' | 'pe' | 'po' | 'pop' | 'push' | 'r' | 'ramsection' | 'read' | 'redef' | 'redefine' | 'repeat' | 'rept' | 'res' | 'ret' | 'reti' | 'retn' | 'rl' | 'rla' | 'rlc' | 'rlca' | 'rld' | 'rombankmap' | 'rr' | 'rra' | 'rrc' | 'rrca' | 'rrd' | 'rst' | 'sbc' | 'scf' | 'sdsctag' | 'section' | 'semifree' | 'set' | 'skip' | 'sla' | 'slot' | 'slotsize' | 'smstag' | 'sp' | 'sra' | 'srl' | 'struct' | 'sub' | 'superfree' | 'swap' | 'to' | 'undef' | 'undefine' | 'xor' | 'z' | ID;

AsciiTableTag hidden(): DOT 'asciitable';
AscTableTag hidden(): DOT 'asctable';
AscTag hidden(): DOT 'asc';
AsmTag hidden(): DOT 'asm';
BankTag hidden(): DOT 'bank';
BytTag hidden(): DOT 'byt';
DbTag hidden(): DOT 'db';
DefineTag hidden(): DOT 'define';
DefTag hidden(): DOT 'def';
DsbTag hidden(): DOT 'dsb';
DsTag hidden(): DOT 'ds';
DstructTag hidden(): DOT 'dstruct';
DswTag hidden(): DOT 'dsw';
DwTag hidden(): DOT 'dw';
ElseTag hidden(): DOT 'else';
EndATag hidden(): DOT 'enda';
EndAsmTag hidden(): DOT 'endasm';
EndETag hidden(): DOT 'ende';
EndIfTag hidden(): DOT 'endif';
EndMTag hidden(): DOT 'endm';
END_ME_TAG hidden(): DOT 'endme';
EndRTag hidden(): DOT 'endr';
EndRoTag hidden(): DOT 'endro';
 END_ST_TAG hidden(): DOT 'endst';
 END_S_TAG hidden():  DOT 'ends';
EmptyFillTag hidden(): DOT 'emptyfill';
EnumTag hidden(): DOT 'enum';
EquTag hidden(): DOT 'equ';
IfTag hidden(): DOT 'if';
IfDefTag hidden(): DOT 'ifdef';
IfNDefTag hidden(): DOT 'ifndef';
IfDefMTag hidden(): DOT 'ifdefm';
IfNDefMTag hidden(): DOT 'ifndefm';
IfExistsTag hidden(): DOT 'ifexists';
IfEqTag hidden(): DOT 'ifeq';
IfNEqTag hidden(): DOT 'ifneq';
IfLeTag hidden(): DOT 'ifle';
IfLeeqTag hidden(): DOT 'ifleeq';
IfGrTag hidden(): DOT 'ifgr';
IfGreqTag hidden(): DOT 'ifgreq';
IncBinTag hidden(): DOT 'incbin';
IncDirTag hidden(): DOT 'incdir';
IncludeTag hidden(): DOT 'include';

MacroTag hidden(): DOT 'macro';
MemoryMapTag hidden(): DOT 'memorymap';
OrgTag hidden():  DOT 'org';
OrgaTag hidden():  DOT 'orga';
RamSectionTag hidden(): DOT 'ramsection';
RedefineTag hidden(): DOT 'redefine';
RedefTag hidden(): DOT 'redef';
RepeatTag hidden(): DOT 'repeat';
ReptTag hidden(): DOT 'rept';
RomBankMapTag hidden(): DOT 'rombankmap';
SdscTag hidden(): DOT 'sdsctag';
SectionTag hidden(): DOT 'section';
SlotTag hidden(): DOT 'slot';
SmsTag hidden(): DOT 'smstag';
StructTag hidden(): DOT 'struct';
UndefineTag hidden(): DOT 'undefine';
UndefTag hidden(): DOT 'undef';

Line:
   (Macro | MacroUsage | Sms | EmptyFill | Asm | EndAsm | Define | Redefine | Undefine | MemoryMap | RomBankMap | SdscTagCmd | Bank | Org | Orga | Section | Slot | Struct | Dstruct | EnumCmd | RamSection | Rept | Asc | Dsb | Dsw | Db | Dw | IncludeType |
      IfCommands | Label | Asciitable | Command) NEWLINE
      | (Labels (c=(Command | Asc | Dsb | Dsw | Db | Dw)) NEWLINE)
      | {EmptyLine} NEWLINE;

IfCommands: IfCmd | IfDefCmd | IfnDefCmd | IfDefMCmd | IfnDefMCmd | IExistsCmd | IfEqCmd | IfnEqCmd | IfLeCmd | IfLeeqCmd | IfGrCmd | IfGreqCmd;
Labels: labels+=Label+;
//Lines: first=Line extra+=SubsequentLine*;
//SubsequentLine: nl=NEWLINE line=Line?;
//MacroNamedArg returns LabelType: {LabelType} name=ID;
Macro: MacroTag name=ID (("nargs" INT)|('args' macroArgs+=LabelType (',' macroArgs+=LabelType)*))? NEWLINE lines+=Line* EndMTag;

MacroUsage: ref=[Macro] (macroArgs+=Expression (',' macroArgs+=Expression)*)?;

Sms: {SmsTagType} SmsTag ;

EmptyFill: EmptyFillTag NUMBER;
Asm: {asmDirective} AsmTag;
EndAsm: {asmDirective} EndAsmTag;

Define: (DefineTag|DefTag|EquTag) varName=LabelType expr=Expression;
Redefine: (RedefineTag|RedefTag) name=LabelType expr=Expression;
Undefine: (UndefineTag|UndefTag) first=VarName (',' others+=VarName)*;

IfCmd: IfTag lop=IfOperand comparison=IfOperator rop=IfOperand NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
ElseCmd: {ElseCmd} ElseTag NEWLINE elseBlock+=Line*;
IfOperator: ('<'|'<='|'>'|'>='|'=='|'!=');
IfOperand: number=NUMBER|str=ID|oth='nargs';
IfDefCmd: IfDefTag define=VarName NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfnDefCmd: IfNDefTag define=VarName NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfDefMCmd: IfDefMTag arg=MacroNumericArg NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfnDefMCmd: IfNDefMTag arg=MacroNumericArg NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IExistsCmd: IfExistsTag filename=FileName NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
FileName: str=STRING|define=VarName;
IfEqCmd: IfEqTag lhs=Expression rhs=NumericLiteral NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfnEqCmd: IfNEqTag lhs=Expression rhs=NumericLiteral NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfLeCmd: IfLeTag lhs=Expression rhs=NumericLiteral NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfLeeqCmd: IfLeeqTag lhs=Expression rhs=NumericLiteral NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfGrCmd: IfGrTag lhs=Expression rhs=NumericLiteral NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;
IfGreqCmd: IfGreqTag lhs=Expression rhs=NumericLiteral NEWLINE block+=Line* elseCmd=ElseCmd? EndIfTag;

MemoryMap: MemoryMapTag NEWLINE cmds+=MemoryMapCommands+ END_ME_TAG;
MemoryMapCommands: {MemoryMapCommands} ('defaultslot' defaultSlot=INT NEWLINE) |
  ('slotsize' size=NUMBER NEWLINE) |
  ('slot' slotNumber=INT startKeyword=ID? startAddress=NUMBER 'size'? size=NUMBER? NEWLINE)
;

RomBankMap: RomBankMapTag NEWLINE cmds+=RomBankCommands+ EndRoTag;
RomBankCommands: ('bankstotal' (INT|HEX) NEWLINE) |
  ('banksize' (INT|HEX) NEWLINE) |
  ('banks' (INT|HEX) NEWLINE)
;

Rept: (RepeatTag|ReptTag) repeatCount=NumericLiteral ('index' index=LabelType)? NEWLINE block+=Line+ EndRTag;

Bank: {BankCmd} BankTag INT ('slot' slot=INT)?;
Org: OrgTag value=(NUMBER);
Orga: OrgaTag value=(NUMBER);

Section: SectionTag sectionName=STRING? ('size' size=NUMBER)? ('align' align=NUMBER)? ('force'|'semifree'|'free'|'superfree'|'overwrite'|'semisubfree')? NEWLINE lines+=Line+ END_S_TAG;

Slot: SlotTag value=(NUMBER);

Struct: StructTag name=LabelType definitions+=VarDefinitionStruct* NEWLINE END_ST_TAG;

Dstruct: DstructTag name=LabelType definitions+=VarDefinitionDstruct* ('values')? NEWLINE END_ST_TAG;

EnumCmd: EnumTag startAddress=Expression order=('asc'|'desc')? 'export'? NEWLINE (definitions+=(VarDefinitionEnum)|NEWLINE)* EndETag;

RamSection: RamSectionTag sectionName=STRING ('bank' bank=NUMBER)? ('slot' slot=NUMBER)? ('align' align=NUMBER)? NEWLINE (definitions+=VarDefinition|NEWLINE)* END_S_TAG;


//VarDefinitionEnum: {VarDef} (varName=VarName ':'? type=(EnumType))? NEWLINE;
VarDefinitionEnum:  EnumType NEWLINE;

EnumType: (VarByte|VarWord|VarByteString|VarWordString|VarStruct);

VarDefinitionDstruct: {VarDefinitionDstruct} NEWLINE ( name=ID type=(VarTypeByte|VarTypeWord|VarTypeByteString|VarTypeWordString))?;
VarDefinitionStruct: {VarDefinitionStruct} NEWLINE ( name=ID type=(VarTypeByte|VarTypeWord|VarTypeByteString|VarTypeWordString))?;
VarDefinition: (VarByte|VarWord|VarByteString|VarWordString|VarStruct) NEWLINE;

VarTypeByte: {VarType} DOT? type=('db');
VarTypeWord: {VarType} DOT? type=('dw');
VarTypeByteString: {VarType} DOT? type=('ds'|'dsb') size=Expression (',' initalValue=Expression)?;
VarTypeWordString: {VarType} DOT? type=('dsw') size=Expression (',' initalValue=Expression)?;

VarStruct:  varName=LabelType ':'? DOT? type=('instanceof') structRef=[LabelType] repeatAmount=INT?;
VarByte:  varName=LabelType ':'? DOT? type=('db');
VarWord:  varName=LabelType ':'? DOT? type=('dw');
VarByteString:  varName=LabelType ':'? DOT? type=('ds'|'dsb') size=Expression (',' initalValue=Expression)?;
VarWordString:  varName=LabelType ':'? DOT? type=('dsw') size=Expression (',' initalValue=Expression)?;

Asciitable: (AsciiTableTag|AscTableTag) NEWLINE definitions+=MapTableEntry+ EndATag;

MapTableEntry: {MapDef} ('map' from=AsciiChar ('to' to=AsciiChar)? '=' startOffset=NUMBER)? NEWLINE;
AsciiChar: (intVal=NUMBER|char=STRING);

Asc: AscTag value=STRING;

Dsb: (DsbTag|DsTag) count=NUMBER ',' value=NUMBER;
Dsw: DswTag count=NUMBER ',' value=NUMBER;

Db: {DbCmd} (DbTag|BytTag) (first=DbDataType (numLitData=DbAdditionalValuesSeparatedBySpace|exprData=DbAdditionalValuesSeparatedByComma)?);
DbAdditionalValuesSeparatedBySpace: others+=DbNonExprDataType+;
DbAdditionalValuesSeparatedByComma: others+=DbAdditionalValueType+;
DbDataType: Expression|str=STRING;
DbNonExprDataType hidden(): MINUS? NumericLiteral;
Dw: {DwCmd} DwTag (first=DbDataType (numLitData=DbAdditionalValuesSeparatedBySpace|exprData=DbAdditionalValuesSeparatedByComma)?);
DbAdditionalValueType: ',' value=DbDataType;

IncludeType: inc=(Include|Incbin|Incdir);
Include: IncludeTag file=STRING;
Incbin: IncBinTag file=STRING ('skip' skipAmount=Expression)? ('read' readAmount=Expression)? swap='swap'? ('fsize' fsize=LabelType)? ('filter' macro=[Macro])?;
Incdir: IncDirTag directory=STRING;

SdscTagCmd: {SdscTagCmd} SdscTag INT(DOT INT)? ',' (STRING|ID) ',' (STRING|ID) ',' (STRING|ID); //FIXME need to make a better version number type

PLUS: '+';
terminal PLUSLABEL: '+:';
terminal PLUSPLUS: '+''+'+;

terminal MINUSLABEL: '-:';
terminal MINUS: '-';
terminal MINUSMINUS: '-''-'+;


BANKLABEL hidden(): ':'referencedObj=[LabelType];

LabelType: name=VarName;

Label hidden() : {Label} (PLUSLABEL|MINUSLABEL|((varName=LabelType|PLUSPLUS|MINUSMINUS)':'));

DotExpression  returns Ref hidden():
   EntityRef  ({DotExpression.ref=current} DOT tail=[VarDefinitionStruct])*
;

EntityRef returns Ref hidden():
    {EntityRef} entity=[LabelType] (DOT structArrayIndex=INT)?
;

Expression returns Expr:
    BitwiseOp;

BitwiseOp returns Expr:
    BitshiftOp
    ({BinaryExpr.left=current} op1=('|' | '&' | '~') right=Addition)*;

BitshiftOp returns Expr:
    Addition
    ({BinaryExpr.left=current} op1=('<<' | '>>') right=Addition)*;

Addition returns Expr:
    Multiplication
    ({BinaryExpr.left=current} op1=(PLUS | MINUS) right=Multiplication)*;

Multiplication returns Expr:
    UnaryMinus
    ({BinaryExpr.left=current} op1=('*' | '/' | '#') right=UnaryMinus)*;

UnaryMinus returns Expr:
    PrimaryExpression |
    op1=MINUS right=UnaryMinus
;

PrimaryExpression returns Expr:
    '(' Expression ')' |
    {NumLiteral} nibbleOp=('<'|'>')? value=NumericLiteral;

Command:
     (Adc|Add|And|Bit|Call|Ccf|Cp|Cpd|Cpdr|Cpi|Cpir|Cpl|Daa|Dec|Di|Djnz|Ei|Ex|Exx|Halt|Im|In|Inc|Ind|Indr|Ini|Inir|Jp|Jr|Ld|Ldd|Lddr|Ldi|Ldir|Neg|Nop|Or|Otdr|Otir|Out|Outi|Outd|Pop|Push|Res|Ret|Reti|Retn|Rl|Rla|Rlc|Rlca|Rld|RrCmd|Rra|Rrc|Rrca|Rrd|Rst|Sbc|Scf|Set|Sla|Sra|Srl|Sub|Xor)
;

DoubleRegisters:
    (REGISTER_AF|REGISTER_BC|REGISTER_DE|REGISTER_HL|xx)
;

Adc: {Operation} opcode='adc' ((reg=REGISTER_A ',' rightOp=s)|(reg=REGISTER_HL ',' rightOp=ss));
Add: {Operation} opcode='add' ((reg=REGISTER_A ',' rightOp=s)|(reg=REGISTER_HL ',' rightOp=ss)|(reg=REGISTER_IX ',' rightOp=pp)|(reg=REGISTER_IY ',' rightOp=rr));
And: {Operation} opcode='and' operand=s;
Bit: {Operation} opcode='bit' leftOp=B ',' rightOp=m;
Call: {Operation} opcode='call' (condition=CC ',')? (expr=Expression|PLUS|PLUSPLUS|MINUS|MINUSMINUS|'_b'|'_f');
Ccf: {Operation} opcode='ccf';
Cp: {Operation} opcode='cp' operand=s;
Cpd: {Operation} opcode='cpd';
Cpdr: {Operation} opcode='cpdr';
Cpi: {Operation} opcode='cpi';
Cpir: {Operation} opcode='cpir';
Cpl: {Operation} opcode='cpl';
Daa: {Operation} opcode='daa';
Dec: {Operation} opcode='dec' operand=(dd|undocRegs);
Di: {Operation} opcode='di';
Djnz: {Operation} opcode='djnz' operand=e;
Ei: {Operation} opcode='ei';
Ex: {Operation} opcode='ex' ((indirectOp=SPIndirect ',' rightOp=ee)|(reg=REGISTER_AF ',' REGISTER_AF_SHADOW)|(reg=REGISTER_DE ',' REGISTER_HL));
Exx: {Operation} opcode='exx';
Halt: {Operation} opcode='halt';
Im: {Operation} opcode='im' literal=NumericLiteral;
In: {Operation} opcode='in' ((reg=REGISTER_A ',' rightIndirectOp=NumericLiteralIndirect)|(leftOp=r ',' rightIndirectOp=CIndirect));
Inc: {Operation} opcode='inc' operand=incOps;
Ind: {Operation} opcode='ind';
Indr: {Operation} opcode='indr';
Ini: {Operation} opcode='ini';
Inir: {Operation} opcode='inir';
Jp: {Operation} opcode='jp' (indirectOp=(IndexIndirect|HLIndirect)|((condition=CC ',')? (lit=Expression|PLUS|PLUSPLUS|MINUS|MINUSMINUS|'_b'|'_f')));
Jr: {Operation} opcode='jr' (condition=jrCc ',')? operand=e;
Ld: {Operation} opcode='ld' ((reg=REGISTER_I ',' REGISTER_A)|(reg=REGISTER_R ',' REGISTER_A)|=>(leftOp=dst ',' rightOp=src)); //FIXME src shouldn't contain 'i','r'. It also needs some changes to handle ix,iy in dst. It should look like this 'ld' ((dst ',' src)|(REGISTER_A ',' ('i'|'r')))
Ldd: {Operation} opcode='ldd';
Lddr: {Operation} opcode='lddr';
Ldi: {Operation} opcode='ldi';
Ldir: {Operation} opcode='ldir';
Neg: {Operation} opcode='neg';
Nop: {Operation} opcode='nop';
Or: {Operation} opcode='or' operand=s;
Otdr: {Operation} opcode='otdr';
Otir: {Operation} opcode='otir';
Out: {Operation} opcode='out' ((indirectOp=CIndirect ',' rightOp=r)|(indirectOp=NumericLiteralIndirect ',' REGISTER_A));
Outd: {Operation} opcode='outd';
Outi: {Operation} opcode='outi';
Pop: {Operation} opcode='pop' reg=DoubleRegisters;
Push: {Operation} opcode='push' reg=DoubleRegisters;
Res: {Operation} opcode='res' leftOp=B ',' rightOp=m;
Ret: {Operation} opcode='ret' condition=CC?;
Reti: {Operation} opcode='reti';
Retn: {Operation} opcode='retn';
Rl: {Operation} opcode='rl' operand=m;
Rla: {Operation} opcode='rla';
Rlc: {Operation} opcode='rlc' operand=m;
Rlca: {Operation} opcode='rlca';
Rld: {Operation} opcode='rld';
RrCmd: {Operation} opcode='rr' operand=m;
Rra: {Operation} opcode='rra';
Rrc: {Operation} opcode='rrc' operand=m;
Rrca: {Operation} opcode='rrca';
Rrd: {Operation} opcode='rrd';
Rst: {Operation} opcode='rst' operand=p;
Sbc: {Operation} opcode='sbc' ((reg=REGISTER_A ',' rightOp=s)|(reg=REGISTER_HL ',' rightOp=ss));
Scf: {Operation} opcode='scf';
Set: {Operation} opcode='set' leftOp=B ',' rightOp=m;
Sla: {Operation} opcode='sla' operand=m;
Sra: {Operation} opcode='sra' operand=m;
Srl: {Operation} opcode='srl' operand=m;
Sub: {Operation} opcode='sub' operand=s;
Xor: {Operation} opcode='xor' operand=s;

terminal SL_COMMENT     : ';' !('\n'|'\r')*;
terminal WS            : (' '|'\t')+;

MacroNumericArg hidden(): arg='\\'INT;

BitOperand: {BitType} value=NumericLiteral;//Must be in range 0..7 This is checked for by a validator
B returns Operand: bitType=BitOperand;
terminal STRUCT_SIZE_OF_DEFINE:  '_sizeof_'ID;
NumericLiteral : sizeof=STRUCT_SIZE_OF_DEFINE|BANKLABEL|structRef=DotExpression|NUMBER|MacroNumericArg; //ID referencedObj=[VarName]|

NUMBER: i=INT('.'fraction=INT)?|str=(HEX|BINARY);
NegNumber hidden(): MINUS? NUMBER;

terminal HEX: ('$'('a'..'f'|'A'..'F'|'0'..'9')+)|('0'..'9'('a'..'f'|'A'..'F'|'0'..'9')*'h');
terminal BINARY: '%'('0'..'1')+;

AnonymousLabel: PLUS|PLUSPLUS|MINUS|MINUSMINUS;

CIndirect returns Operand: ('[' reg=REGISTER_C ']')|('(' reg=REGISTER_C ')');
BCIndirect returns Operand: ('[' reg=REGISTER_BC ']')|('(' reg=REGISTER_BC ')');
DEIndirect returns Operand: ('[' reg=REGISTER_DE ']')|('(' reg=REGISTER_DE ')');
HLIndirect returns Operand: ('[' reg=REGISTER_HL ']')|('(' reg=REGISTER_HL ')');
SPIndirect returns Operand: ('[' reg=REGISTER_SP ']')|('(' reg=REGISTER_SP ')');
NumericLiteralIndirect returns Operand: ('[' lit=NumericLiteral ']')|('(' =>lit=NumericLiteral ')');

IndexIndirectPlusOffset returns Operand: ('[' indexPlusOffset=IndexPlusOffset ']')|('(' indexPlusOffset=IndexPlusOffset ')');
IndexIndirect returns Operand: ('[' reg=xx ']')|('(' reg=xx ')');

IndexPlusOffset returns Operand: (reg=xx)|(reg=xx offset=SignedByteOffset);
SignedByteOffset: sign=(PLUS)? value=Expression; //FIXME Decision can match input such as "RULE_MINUS" using multiple alternatives //Must be in the range -128..+127 This is checked for by a validator

CC: 'c'|'m'|'nc'|'nz'|'p'|'pe'|'po'|'z';
jrCc: 'c'|'nc'|'nz'|'z';

dst returns Operand: =>indirectOp=NumericLiteralIndirect|op=(s|ss)|indirectOp=(BCIndirect|DEIndirect)|reg=(xx);

e returns Operand: (expr=Expression|anonLabel=(PLUS|PLUSPLUS|MINUS|MINUSMINUS|'_b'|'_f')); //fixme -126 to +129
m returns Operand: op=(r)|indirectOp=(HLIndirect|IndexIndirectPlusOffset);
p returns Operand: intType=NUMBER; //FIXME need to restrict to $0000, $0008, $0010, $0018, $0020, $0028, $0030 or $0038
pp returns Operand: reg=(REGISTER_BC|REGISTER_DE|REGISTER_IX|REGISTER_SP);
r returns Operand: reg=(REGISTER_A|REGISTER_B|REGISTER_C|REGISTER_D|REGISTER_E|REGISTER_H|REGISTER_L);
rr returns Operand: reg=(REGISTER_BC|REGISTER_DE|REGISTER_IY|REGISTER_SP);
s returns Operand:  op=(m|undocRegs)|expr=Expression;
ss returns Operand: reg=(REGISTER_BC|REGISTER_DE|REGISTER_HL|REGISTER_SP);
src returns Operand: =>indirectOp=NumericLiteralIndirect|op=(s|ss)|indirectOp=(BCIndirect|DEIndirect)|reg=(REGISTER_I|REGISTER_R|xx)|anonLabel=(PLUS|PLUSPLUS|MINUS|MINUSMINUS);
xx: (REGISTER_IX|REGISTER_IY);
dd returns Operand: op=(m|ss)|reg=xx;
ee returns Operand: reg=(REGISTER_HL|xx);
incOps returns Operand: op=(r|ss|IndexIndirectPlusOffset|undocRegs)|reg=(xx)|indirectOp=HLIndirect;
undocRegs returns Operand: reg=(REGISTER_IXH|REGISTER_IXL|REGISTER_IYH|REGISTER_IYL);
