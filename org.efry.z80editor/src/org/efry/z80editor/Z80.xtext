grammar org.efry.z80editor.Z80 with org.eclipse.xtext.common.Terminals

generate z80 "http://www.efry.org/z80editor/Z80"

Model:
    commands+=Line*;


terminal REGISTER_A: 'a'|'A';
terminal REGISTER_B: 'b'|'B';
REGISTER_C: 'c'|'C'; //cannot be a terminal because it clashes with the 'C'arry flag.
terminal REGISTER_D: 'd'|'D';
terminal REGISTER_E: 'e'|'E';
terminal REGISTER_H: 'h'|'H';
terminal REGISTER_I: 'i';
terminal REGISTER_L: 'l'|'L';
terminal REGISTER_R: 'r';

terminal REGISTER_AF: 'af'|'Af'|'aF'|'AF';
terminal REGISTER_AF_SHADOW: 'af\''|'Af\''|'aF\''|'AF\'';
terminal REGISTER_BC: 'bc'|'Bc'|'bC'|'BC';
REGISTER_DE: 'de'|'De'|'dE'|'DE';
terminal REGISTER_HL: 'hl'|'Hl'|'hL'|'HL';
terminal REGISTER_IX: 'ix'|'Ix'|'iX'|'IX';
terminal REGISTER_IY: 'iy'|'Iy'|'iY'|'IY';
terminal REGISTER_SP: 'sp'|'Sp'|'sP'|'SP';


terminal NEWLINE:
// New line on DOS or Unix
    '\r'? '\n';
  
Line:
	Define NEWLINE |
	MemoryMap NEWLINE |
	RomBankMap NEWLINE |
	Sdsctag NEWLINE |
	Bank NEWLINE |
	Org NEWLINE |
	Section NEWLINE |
	RamSection NEWLINE |
	Rept NEWLINE |
	Db NEWLINE |
	Dw NEWLINE |
	Include NEWLINE |
	Incbin NEWLINE |
	//UnHandledWlaDxCommand NEWLINE |
    (LabelType | Command) NEWLINE |
    l=LabelType cmd=Command NEWLINE |
    NEWLINE;




Define returns DefineType: '.define' VarName expr=Expression;
MemoryMap: '.memorymap' NEWLINE MemoryMapCommands+ '.endme';
MemoryMapCommands: ('defaultslot' INT NEWLINE) |
	('slotsize' (HEX|INT) NEWLINE) |
	('slot' (HEX|INT) (HEX|INT)? NEWLINE)
;

RomBankMap: '.rombankmap' NEWLINE RomBankCommands+ '.endro';
RomBankCommands: ('bankstotal' (INT|HEX) NEWLINE) |
	('banksize' (INT|HEX) NEWLINE) |
	('banks' (INT|HEX) NEWLINE)
;

Rept: '.rept' INT NEWLINE block+=Line+ '.endr';
Bank: '.bank' INT ('slot' INT)?;
Org: '.org' value=(NUMBER);
Section: '.section' name=STRING? ('size' size=NUMBER)? ('align' align=NUMBER)? ('force'|'semifree'|'free'|'superfree'|'overwrite')? NEWLINE lines+=Line+ '.ends';
//Section: '.section' name=STRING? ('size' (INT|HEX|BINARY))? ('align' (INT|HEX|BINARY))? ('force'|'semifree'|'free'|'superfree'|'overwrite')? NEWLINE;

RamSection:'.ramsection' name=STRING ('bank' bank=NUMBER)? ('slot' slot=NUMBER)? NEWLINE definitions+=VarDefinition* '.ends';

VarDefinition: (id=VarName ('db'|'dw'|('ds' ds=(NUMBER))|('dsb' dsb=Expression)|('dsw' dsw=NUMBER)))? NEWLINE;
Db: '.db' (INT|HEX|BINARY) (','? (INT|HEX|BINARY))*;
Dw: '.dw' (INT|HEX|BINARY) (','? (INT|HEX|BINARY))*;
Include: '.include' file=STRING;
Incbin: '.incbin' file=STRING;

Sdsctag: '.sdsctag' INT('.'INT)? ',' (STRING|ID) ',' (STRING|ID) ',' (STRING|ID);

//terminal UnHandledWlaDxCommand: '.' ID !('\n'|'\r')*; //FIXME

 PLUS: '+';
terminal PLUSLABEL: '+:';
terminal PLUSPLUS: '+''+'+;

terminal MINUSLABEL: '-:';
terminal MINUS: '-';
terminal MINUSMINUS: '-''-'+;

BANKLABEL hidden(): ':'referencedObj=[VarName];

VarName: name=ID;

LabelType hidden() : (PLUSLABEL|MINUSLABEL|((VarName|PLUSPLUS|MINUSMINUS)':'));

Expression returns Expr:
    BitwiseOp;

BitwiseOp returns Expr:
    Addition
    ({BinaryExpr.left=current} op1=('|' | '&') right=Addition)*;

Addition returns Expr:
    Multiplication
    ({BinaryExpr.left=current} op1=(PLUS | MINUS) right=Multiplication)*;

Multiplication returns Expr:
    PrimaryExpression
    ({BinaryExpr.left=current} op1=('*' | '/') right=PrimaryExpression)*;

PrimaryExpression returns Expr:
    '(' Expression ')' |
    {NumLiteral} sign=MINUS? value=NumericLiteral;
      
Command:
    (Adc|Add|And|Bit|Call|Ccf|Cp|Daa|Dec|Di|Djnz|Ei|Ex|Exx|Halt|Im|In|Inc|Ind|Indr|Ini|Inir|Jp|Jr|Ld|Ldd|Lddr|Ldi|Ldir|Neg|Nop|Or|Otdr|Otir|Out|Outi|Outd|Pop|Push|Res|Ret|Reti|Retn|Rl|Rla|Rlc|Rlca|Rld|RrCmd|Rra|Rrca|Rrd|Rst|Sbc|Set|Sla|Sra|Srl|Sub|Xor)
;

DoubleRegisters:
    (REGISTER_AF|REGISTER_BC|REGISTER_DE|REGISTER_HL|xx)
;

Adc returns Operation: 'adc' ((REGISTER_A ',' rightOp=s)|(REGISTER_HL ',' rightOp=ss));
Add returns Operation: 'add' ((REGISTER_A ',' rightOp=s)|(REGISTER_HL ',' rightOp=ss)|(REGISTER_IX ',' rightOp=pp)|(REGISTER_IY ',' rightOp=rr));
And: 'and' s;
Bit returns Operation: 'bit' leftOp=B ',' rightOp=m;
Call: 'call' (CC ',')? lit=NumericLiteral;
Ccf: 'ccf';
Cp: 'cp' s;
Daa: 'daa';
Dec returns Operation: 'dec' op=(s|ss)|reg=xx;
Di: 'di';
Djnz: 'djnz' e;
Ei: 'ei';
Ex: 'ex' ((SPIndirect ',' REGISTER_HL)|(SPIndirect ',' xx)|(REGISTER_AF ',' REGISTER_AF_SHADOW)|(REGISTER_DE ',' REGISTER_HL));
Exx: 'exx';
Halt: 'halt';
Im returns Operation: 'im' lit=NumericLiteral;
In returns Operation: 'in' ((REGISTER_A ',' rightOp=NumericLiteralIndirect)|(leftOp=r ',' CIndirect));
Inc returns Operation: 'inc' incOps;
Ind: 'ind';
Indr: 'indr';
Ini: 'ini';
Inir: 'inir';
Jp returns Operation: 'jp' (reg=(HLIndirect|IndexIndirect)|((CC ',')? (lit=NumericLiteral|PLUS|PLUSPLUS|MINUS|MINUSMINUS)));
Jr: 'jr' (CC ',')? e;
Ld returns Operation: 'ld' leftOp=dst ',' rightOp=src; //FIXME src shouldn't contain 'i','r'. It should look like this 'ld' ((dst ',' src)|(REGISTER_A ',' ('i'|'r')))
Ldd: 'ldd';
Lddr: 'lddr';
Ldi: 'ldi';
Ldir: 'ldir';
Neg: 'neg';
Nop: 'nop';
Or: 'or' s;
Otdr: 'otdr';
Otir: 'otir';
Out returns Operation: 'out' ((CIndirect ',' rightOp=r)|(NumericLiteralIndirect ',' REGISTER_A));
Outd: 'outd';
Outi: 'outi';
Pop: 'pop' DoubleRegisters;
Push: 'push' DoubleRegisters;
Res returns Operation: 'res' leftOp=B ',' rightOp=m;
Ret: 'ret' CC?;
Reti: 'reti';
Retn: 'retn';
Rl returns Operation: 'rl' op=m;
Rla: 'rla';
Rlc returns Operation: 'rlc' op=m;
Rlca: 'rlca';
Rld: 'rld';
RrCmd returns Operation: 'rr' op=m;
Rra: 'rra';
Rrca: 'rrca';
Rrd: 'rrd';
Rst: 'rst' p;
Sbc returns Operation: 'sbc' ((REGISTER_A ',' rightOp=s)|(REGISTER_HL ',' rightOp=ss));
Set returns Operation: 'set' leftOp=B ',' rightOp=m;
Sla returns Operation: 'sla' op=m;
Sra returns Operation: 'sra' op=m;
Srl returns Operation: 'srl' op=m;
Sub: 'sub' s;
Xor: 'xor' s;

terminal SL_COMMENT     : ';' !('\n'|'\r')*;
terminal WS            : (' '|'\t')+;

B returns Operand: intType=INT; //'0'..'7'; //FIXME
NumericLiteral : BANKLABEL|referencedObj=[VarName]|NUMBER; //ID
NUMBER: i=INT|str=(HEX|BINARY);
terminal HEX: ('$'('a'..'f'|'A'..'F'|'0'..'9')+)|('0'..'9'('a'..'f'|'A'..'F'|'0'..'9')*'h');
terminal BINARY: '%'('0'..'1')+;


CIndirect: ('[' REGISTER_C ']')|('(' REGISTER_C ')');
BCIndirect: ('[' REGISTER_BC ']')|('(' REGISTER_BC ')');
DEIndirect: ('[' REGISTER_DE ']')|('(' REGISTER_DE ')');
HLIndirect: ('[' REGISTER_HL ']')|('(' REGISTER_HL ')');
SPIndirect: ('[' REGISTER_SP ']')|('(' REGISTER_SP ')');
NumericLiteralIndirect: ('[' NumericLiteral ']')|('(' NumericLiteral ')');

IndexIndirectPlusOffset: ('[' IndexPlusOffset ']')|('(' IndexPlusOffset ')');
IndexIndirect: ('[' xx ']')|('(' xx ')');

IndexPlusOffset: xx PLUS INT;

CC: 'c'|'m'|'nc'|'nz'|'p'|'pe'|'po'|'z';

dst returns Operand: op=(s|ss)|reg=(BCIndirect|DEIndirect)|=>NumericLiteralIndirect;

e returns Operand: (lit=NumericLiteral|anonLabel=(PLUS|PLUSPLUS|MINUS|MINUSMINUS)); //fixme -126 to +129
m returns Operand: op=r|reg=(HLIndirect|IndexIndirectPlusOffset);
p returns Operand: intType=INT; //FIXME need to restrict to $0000, $0008, $0010, $0018, $0020, $0028, $0030 or $0038 
pp returns Operand: reg=(REGISTER_BC|REGISTER_DE|REGISTER_IX|REGISTER_SP);
r returns Operand: reg=(REGISTER_A|REGISTER_B|REGISTER_C|REGISTER_D|REGISTER_E|REGISTER_H|REGISTER_L);
rr returns Operand: reg=(REGISTER_BC|REGISTER_DE|REGISTER_IY|REGISTER_SP);
s returns Operand:  op=m|expr=Expression;
ss returns Operand: reg=(REGISTER_BC|REGISTER_DE|REGISTER_HL|REGISTER_SP);
src returns Operand: op=(s|ss)|reg=(BCIndirect|DEIndirect|REGISTER_I|REGISTER_R)|=>NumericLiteralIndirect;
xx: (REGISTER_IX|REGISTER_IY);
incOps returns Operand: op=(r|ss)|reg=(HLIndirect|xx|IndexIndirectPlusOffset);